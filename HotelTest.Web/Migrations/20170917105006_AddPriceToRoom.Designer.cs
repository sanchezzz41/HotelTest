// <auto-generated />
using HotelTest.Database;
using HotelTest.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HotelTest.Web.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20170917105006_AddPriceToRoom")]
    partial class AddPriceToRoom
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("HotelTest.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("RoleName");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HotelTest.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("IsFree");

                    b.Property<int>("MaxCount");

                    b.Property<int>("Price");

                    b.Property<int>("RoomOptionId");

                    b.HasKey("Id");

                    b.HasIndex("RoomOptionId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HotelTest.Domain.Entities.TypeRoom", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("NameOfTypeRoom");

                    b.HasKey("Id");

                    b.ToTable("TypeRooms");
                });

            modelBuilder.Entity("HotelTest.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Fio")
                        .IsRequired();

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HotelTest.Domain.Entities.Visitor", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("ArrivalDate");

                    b.Property<DateTime>("DateOfDeparture");

                    b.Property<int>("RoomId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("HotelTest.Domain.Entities.Room", b =>
                {
                    b.HasOne("HotelTest.Domain.Entities.TypeRoom", "TypeRoom")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HotelTest.Domain.Entities.User", b =>
                {
                    b.HasOne("HotelTest.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HotelTest.Domain.Entities.Visitor", b =>
                {
                    b.HasOne("HotelTest.Domain.Entities.Room", "Room")
                        .WithMany("Visitors")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HotelTest.Domain.Entities.User", "User")
                        .WithMany("Visitors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
